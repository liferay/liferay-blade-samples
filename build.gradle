FileTree bndtoolsOutputFiles = fileTree(dir: 'bndtools/', include: '**/dist/bundles/**/*.jar', exclude: '**/*latest.jar')
FileTree gradleOutputFiles = fileTree(dir: 'gradle/', include: '**/libs/*.jar')
FileTree liferayGradleOutputFiles = fileTree(dir: 'liferay-gradle/', include: '**/libs/*.jar')
FileTree mavenOutputFiles = fileTree(dir: 'maven/', include: '**/target/*.jar')

int canonicalSize = liferayGradleOutputFiles.size()

task outputFilesSizeTest << {
	assert canonicalSize == bndtoolsOutputFiles.size()
	assert canonicalSize == gradleOutputFiles.size()
	assert canonicalSize == mavenOutputFiles.size()
}

task outputFilesSortTest << {
	def fileNamesDiff = liferayGradleOutputFiles.files.name.sort() - gradleOutputFiles.files.name.sort()
	assert [] == fileNamesDiff : "liferay-gradle vs gradle"

	fileNamesDiff = liferayGradleOutputFiles.files.name.sort() - bndtoolsOutputFiles.files.name.sort()
	assert [] == fileNamesDiff : "liferay-gradle vs bndtools"

	fileNamesDiff = liferayGradleOutputFiles.files.name.sort() - mavenOutputFiles.files.name.sort()
	assert [] == fileNamesDiff : "liferay-gradle vs maven"
}

task outputFilesTest << {}

outputFilesTest.dependsOn outputFilesSizeTest
outputFilesTest.dependsOn outputFilesSortTest

task replicateSources << {
	Closure projectFilter = { it.isDirectory() && !it.name.matches("\\..*") }

	def canonicalProjects = file('liferay-gradle').listFiles().findAll(projectFilter)

	def replicationParents = files('bndtools', 'gradle', 'maven')

	canonicalProjects.each { canonicalProject ->
		replicationParents.each { replicationParent ->
			def replicationProjects = replicationParent.listFiles().findAll(projectFilter)

			def replicationProject = replicationProjects.find{ it.name == canonicalProject.name }
			
			def replicationSrc = new File( replicationProject, 'src/' )
			
			replicationSrc.deleteDir()
			
			def canonicalSrc = new File( canonicalProject, 'src/' )
			
			ant.copy(todir: replicationSrc) {
				fileset(dir: canonicalSrc, includes: "**")
			}
		}
	}
}

configurations {
	bnd
}

dependencies {
	bnd "biz.aQute.bnd:bnd:2.4.0"
}

repositories {
	mavenLocal()

	mavenCentral()
}

task jarBndTools(type: GradleBuild) {
	dir = file("bndtools")
	tasks = ["jar"]
}

task jarGradle(type: GradleBuild) {
	dir = file("gradle")
	tasks = ["jar"]
}

task jarLiferayGradle(type: GradleBuild) {
	dir = file("liferay-gradle")
	tasks = ["jar"]
}

task diff << {}

diff.dependsOn diffGradle
diff.dependsOn diffBndTools
diff.dependsOn diffMaven

task diffGradle(dependsOn: [jarGradle, jarLiferayGradle]) << {
	liferayGradleOutputFiles.each {
		liferayGradleOutputFile ->

		def gradleOutputFile = gradleOutputFiles.find {
			it.name == liferayGradleOutputFile.name
		}

		println "*******************************************************"
		println "*******************************************************"
		println "*******************************************************"

		javaexec {
			args "diff", liferayGradleOutputFile, gradleOutputFile

			classpath = configurations.bnd
			main = "aQute.bnd.main.bnd"
		}
	}
}


task diffBndTools(dependsOn: [jarLiferayGradle, jarBndTools]) << {
	liferayGradleOutputFiles.each {
		liferayGradleOutputFile ->

		def bndtoolsOutputFile = bndtoolsOutputFiles.find {
			it.name == liferayGradleOutputFile.name
		}

		println "*******************************************************"
		println "*******************************************************"
		println "*******************************************************"


		javaexec {
			args "diff", liferayGradleOutputFile, bndtoolsOutputFile

			classpath = configurations.bnd
			main = "aQute.bnd.main.bnd"
		}
	}
}

task diffMaven(dependsOn: [jarLiferayGradle, jarMaven]) << {
	liferayGradleOutputFiles.each {
		liferayGradleOutputFile ->

		def mavenOutputFile = mavenOutputFiles.find {
			it.name == liferayGradleOutputFile.name
		}

		println "*******************************************************"
		println "*******************************************************"
		println "*******************************************************"


		javaexec {
			args "diff", liferayGradleOutputFile, mavenOutputFile

			classpath = configurations.bnd
			main = "aQute.bnd.main.bnd"
		}
	}
}