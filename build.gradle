buildscript {
	dependencies {
		classpath group: "net.diibadaaba.zipdiff", name: "zipdiff", version: "1.0"
		classpath group: "org.apache.commons", name: "commons-io", version: "1.3.2"

	}
	repositories {
		mavenCentral()
	}
}

import net.diibadaaba.zipdiff.DifferenceCalculator
import net.diibadaaba.zipdiff.Differences
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry
import groovy.io.FileType



FileTree gradleBundles = fileTree(dir: 'gradle', include: '**/libs/*.jar')
FileTree liferayWorkspaceBundles = fileTree(dir: 'liferay-workspace', include: '**/libs/*.jar', exclude: 'tests/*')
FileTree mavenBundles = fileTree(dir: 'maven', include: '**/target/*.jar')

int canonicalBundlesSize = gradleBundles.size()

task bundlesSizeTest

bundlesSizeTest.doLast {
	assert canonicalBundlesSize == liferayWorkspaceBundles.size()
	assert canonicalBundlesSize == mavenBundles.size()
}

FileTree gradleWars = fileTree(dir: 'gradle', include: '**/libs/*.war')
FileTree liferayWorkspaceWars = fileTree(dir: 'liferay-workspace/wars', include: '**/libs/*.war')
FileTree mavenWars = fileTree(dir: 'maven', include: '**/target/*.war')

int canonicalWarsSize = gradleWars.size()

task warsSizeTest

warsSizeTest.doLast {
	assert canonicalWarsSize == gradleWars.size()
	assert canonicalWarsSize == liferayWorkspaceWars.size()
	assert canonicalWarsSize == mavenWars.size()
}

task bundlesSortTest

bundlesSortTest.doLast {
	def fileNamesDiff = gradleBundles.files.name.sort() - liferayWorkspaceBundles.files.name.sort()
	assert [] == fileNamesDiff : "gradle vs liferay-workspace"

	fileNamesDiff = gradleBundles.files.name.sort() - mavenBundles.files.name.sort()
	assert [] == fileNamesDiff : "gradle vs maven"
}

task bundlesTest

bundlesTest.dependsOn bundlesSizeTest
bundlesTest.dependsOn bundlesSortTest

task warsTest

warsTest.dependsOn warsSizeTest

task replicateSources

replicateSources.doLast {
	def canonicalSource

	if (project.hasProperty('sourceProjectProp')) {
		canonicalSource = file(project.getProperty('sourceProjectProp'))
	}
	else {
		canonicalSource = file('gradle')
	}

	def replicationParents = files(['gradle', 'liferay-workspace', 'maven']) - canonicalSource

	def canonicalProjects = []

	canonicalSource.eachFileRecurse (FileType.DIRECTORIES) { dir ->
		if(new File(dir,"bnd.bnd").exists()) {
			canonicalProjects.add(dir);
		}
		if((new File(dir,"build.gradle").exists() && new File(dir,"build.gradle").text.contains("apply plugin: \'war\'")) || (new File(dir, "pom.xml").exists() && new File(dir, "pom.xml").text.contains("maven-war-plugin"))){
			canonicalProjects.add(dir);
		}
		if ((new File(dir, "build.gradle").exists() && new File(dir,"build.gradle").text.contains("apply plugin: \"com.liferay.portal.tools.theme.builder\""))) {
			canonicalProjects.add(dir);
		}

		canonicalProjects.removeAll { it.name.contains("test") }
	}

	canonicalProjects.each { canonicalProject ->
		replicationParents.each { replicationParent ->
			def replicationProjects = []

			replicationParent.eachFileRecurse (FileType.DIRECTORIES) { replicationProject ->

				replicationProjects.add(replicationProject);
			}

			def replicationProject = replicationProjects.find{ it.name == canonicalProject.name }

			if ((canonicalSource == ("gradle" || "liferay-workspace")) && (replicationProject == ("gradle" || "liferay-workspace"))) {
				ant.copy(todir: replicationProject) {
					fileset(dir: canonicalProject, includes: "bnd.bnd", "build.gradle")
				}
			}

			ant.copy(todir: replicationProject) {
				fileset(dir: canonicalProject, includes: "*.markdown")
			}

			ant.copy(todir: replicationProject) {
				fileset(dir: canonicalProject) {
					include(name: 'src/')
					include(name: 'service.xml')
					include(name: '*.properties')
					exclude(name: '**/test**/')
				}
			}
		}
	}
}

configurations {
	bnd
}

dependencies {
	bnd group: "biz.aQute.bnd", name: "biz.aQute.bnd", version: "3.3.0"
}

repositories {
	mavenCentral()
}

task bundlesDiffTest

bundlesDiffTest.doLast{
	def errorList = []

	[liferayWorkspaceBundles, mavenBundles].each { replicationFiles ->
		replicationFiles.each { replicationFile ->

			def gradleOutputFile = gradleBundles.find {
				it.name == replicationFile.name
			}

			String exclusions = "*pom.properties, *pom.xml, Archiver-Version, Built-By, Build-Jdk, Javac-Debug, Javac-Deprecation, Javac-Encoding"

			def os = new ByteArrayOutputStream()

			javaexec {
				args "diff", "-i", "${exclusions}", replicationFile, gradleOutputFile

				classpath = configurations.bnd
				main = "aQute.bnd.main.bnd"
				standardOutput = os
			}

			def errorOutput = os.toString()

			if (errorOutput) {
				errorList.add("${replicationFiles} - ${replicationFile.name} \n" + errorOutput)
			}
		}
	}

		if (!errorList.empty) {
		throw new GradleException(errorList.toListString())
	}
}

task warsDiffTest

warsDiffTest.doLast{
	[mavenWars, liferayWorkspaceWars].each { replicationWars ->
		replicationWars.each { replicationWar ->

			def gradleWar = gradleWars.find {
				it.name == replicationWar.name.replaceAll("-1.0.0", "")
			}

			DifferenceCalculator differenceCalculator = new DifferenceCalculator(
				replicationWar, gradleWar)

			differenceCalculator.setFilenameRegexToIgnore(
				Collections.singleton(".*META-INF.*"))
			differenceCalculator.setIgnoreTimestamps(true)

			Differences differences = differenceCalculator.getDifferences()

			if (differences.hasDifferences()) {
				boolean realChange = false

				def added = differences.getAdded()
				def changed = differences.getChanged()
				def removed = differences.getRemoved()

				if (added.isEmpty() && !changed.isEmpty() && removed.isEmpty()) {
					for (String change : changed.keySet()) {
						ZipArchiveEntry[] zipArchiveEntries = changed.get(change);

						ZipArchiveEntry zipArchiveEntry1 = zipArchiveEntries[0];
						ZipArchiveEntry zipArchiveEntry2 = zipArchiveEntries[0];

						if (zipArchiveEntry1.isDirectory() &&
								zipArchiveEntry2.isDirectory() &&
								(zipArchiveEntry1.getSize() ==
									zipArchiveEntry2.getSize()) &&
								(zipArchiveEntry1.getCompressedSize() <= 2) &&
								(zipArchiveEntry2.getCompressedSize() <= 2)) {

							// Skip zipdiff bug

							continue;
						}

						realChange = true;

						break;
					}
				}
				else {
						realChange = true;
				}

				if (realChange) {
					ant.unzip(src: replicationWar.absolutePath, dest:replicationWar.getParentFile().absolutePath + "/explodedWar")
					ant.unzip(src: gradleWar.absolutePath, dest:gradleWar.getParentFile().absolutePath + "/explodedWar")
					throw new GradleException(
						"wars " + replicationWar + " and " + gradleWar + " do not match:\n" +
							differences)
				}
			}
		}
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.1'
	jarFile = "${projectDir}/.gradle/gradle-wrapper.jar"
}

task diff

diff.dependsOn bundlesDiffTest
diff.dependsOn warsDiffTest
